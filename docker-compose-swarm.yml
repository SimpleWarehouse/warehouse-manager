version: "3.7"
services:
  frontend_produse:
    image: danielapapacica/frontend_produse:vers1
    stdin_open: true
    ports:
      - "3001:3001"
    depends_on:
      - backend_produse
    networks:
      - ui

  backend_produse:
    image: danielapapacica/backend_produse:vers1
    ports:
      - "3000:3000"
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        order: start-first
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - backend
      - ui
      - internal

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: produse
    ports:
      - "27019:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
      - reports
      - mongo_express
    deploy:
      placement:
        constraints: [node.role == manager]

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    logging:
      driver: none
    networks:
      - mongo_express
      - internal
    deploy:
      placement:
        constraints: [node.role == manager]
  
  auth:
    image: kennythebard/wms-auth:1.9
    ports:
      - "3002:3002"
    depends_on:
      - postgres
    networks:
      - auth
      - internal
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        order: start-first
        delay: 10s
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: authdb
      TZ: Europe/Bucharest
      PGTZ: Europe/Bucharest
    ports:
      - "54321:5432"
    volumes:
      - auth_data:/var/lib/postgresql/auth_data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - auth
      - adminer
    deploy:
      placement:
        constraints: [node.role == manager]
    
  
  adminer:
    image: adminer
    ports:
      - 8080:8080
    depends_on:
      - postgres
    networks:
      - adminer
      - internal
    deploy:
      placement:
        constraints: [node.role == manager]
  
  reports:
    image: kennythebard/wms-reports:1.0
    depends_on:
      - mongo
    networks:
      - reports

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - 8082:8080
    stop_grace_period: 1m10s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
  
  # kong:
  #   image: kong:latest
  #   restart: always
  #   networks:
  #     - kong-net
  #   environment:
  #     KONG_PG_HOST: kong-database
  #     KONG_PROXY_LISTEN: 0.0.0.0:8000
  #     KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #   depends_on:
  #     - kong-migration
  #     - kong-database
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://kong:8001"]
  #     interval: 5s
  #     timeout: 2s
  #     retries: 15
  #   ports:
  #     - "8001:8001"
  #     - "8000:8000"
    
volumes:
  mongo_data:
  auth_data:

networks:
  backend:
  ui:
  mongo_express:
  reports:
  auth:
  adminer:
  internal: